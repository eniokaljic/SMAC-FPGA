LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;
USE IEEE.NUMERIC_STD.ALL;

ENTITY smac_tx_buffer IS
	PORT ( clk: IN STD_LOGIC;
			 reset: IN STD_LOGIC;
			 address: IN STD_LOGIC_VECTOR(8 DOWNTO 0);
			 data: IN STD_LOGIC_VECTOR(7 DOWNTO 0);
			 wren: IN STD_LOGIC;
			 len: IN STD_LOGIC_VECTOR(8 DOWNTO 0);
			 send: IN STD_LOGIC;
			 ready: OUT STD_LOGIC;
			 phy_tx_data: OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
			 phy_tx_enable: OUT STD_LOGIC;
			 phy_tx_ready: IN STD_LOGIC );
END smac_tx_buffer;

ARCHITECTURE arch_smac_tx_buffer OF smac_tx_buffer IS
	COMPONENT ram512 IS
		PORT ( address: IN STD_LOGIC_VECTOR (8 DOWNTO 0);
				 clock: IN STD_LOGIC  := '1';
				 data: IN STD_LOGIC_VECTOR (7 DOWNTO 0);
				 wren: IN STD_LOGIC ;
				 q: OUT STD_LOGIC_VECTOR (7 DOWNTO 0) );
	END COMPONENT;

	SIGNAL ram_address: STD_LOGIC_VECTOR(8 DOWNTO 0);
	SIGNAL ram_data_in: STD_LOGIC_VECTOR(7 DOWNTO 0);
	SIGNAL ram_data_out: STD_LOGIC_VECTOR(7 DOWNTO 0);
	SIGNAL ram_wren: STD_LOGIC;
	
	SIGNAL address_counter: STD_LOGIC_VECTOR(8 DOWNTO 0);
	SIGNAL address_counter_next: STD_LOGIC_VECTOR(8 DOWNTO 0);
	
	TYPE state_t IS (IDLE, LOADING, SENDING);
	SIGNAL state, state_next: state_t;

BEGIN
	ram512_inst: ram512
	PORT MAP ( address => ram_address,
				  clock => clk,
				  data => ram_data_in,
				  wren => ram_wren,
				  q => ram_data_out );
	
	fsm_clk: PROCESS (clk, reset) IS
	BEGIN
		IF reset = '1' THEN
			state <= IDLE;
			address_counter <= (OTHERS => '0');
		ELSE
			IF RISING_EDGE(clk) THEN
				state <= state_next;
				address_counter <= address_counter_next;
			END IF;
		END IF;
	END PROCESS;
	
	fsm: PROCESS (state, send, address, data, wren) IS
	BEGIN
		state_next <= state;
		address_counter_next <= address_counter;
		ready <= '0';
		
		CASE state IS
		
		WHEN IDLE =>
			ready <= '1';
			ram_address <= address;
			ram_data_in <= data;
			ram_wren <= wren;
			phy_tx_enable <= '0';
			IF send = '1' THEN
				address_counter_next <= (OTHERS => '0');
				state_next <= LOADING;
			END IF;
		
		WHEN LOADING =>
			ready <= '0';
			ram_address <= address_counter;
			ram_data_in <= (OTHERS => '0');
			ram_wren <= '0';
			phy_tx_enable <= '0';
			phy_tx_data <= ram_data_out;
			IF phy_tx_ready = '1' THEN				
				IF address_counter < len THEN
					address_counter_next <= address_counter + 1;
					state_next <= SENDING;
				ELSE
					state_next <= IDLE;
				END IF;
			END IF;
	
		WHEN SENDING =>
			ready <= '0';
			ram_address <= address_counter;
			ram_data_in <= (OTHERS => '0');
			ram_wren <= '0';
			IF phy_tx_ready = '1' THEN
				phy_tx_enable <= '1';
				state_next <= LOADING;
			ELSE
				phy_tx_enable <= '0';
			END IF;			
		
		END CASE;
	END PROCESS;	
	
END arch_smac_tx_buffer;