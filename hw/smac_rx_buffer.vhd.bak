LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;
USE IEEE.NUMERIC_STD.ALL;

ENTITY smac_rx_buffer IS
	PORT ( clk: IN STD_LOGIC;
			 reset: IN STD_LOGIC;
			 address: IN STD_LOGIC_VECTOR(8 DOWNTO 0);
			 data: OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
			 len: OUT STD_LOGIC_VECTOR(8 DOWNTO 0);
			 receive: IN STD_LOGIC;
			 ready: OUT STD_LOGIC;
			 error: OUT STD_LOGIC;
			 phy_rx_data: IN STD_LOGIC_VECTOR(7 DOWNTO 0);
			 phy_rx_enable: IN STD_LOGIC;
			 phy_rx_error: IN STD_LOGIC;
			 phy_rx_active: IN STD_LOGIC );
END smac_rx_buffer;

ARCHITECTURE arch_smac_rx_buffer OF smac_rx_buffer IS
	COMPONENT ram512 IS
		PORT ( address: IN STD_LOGIC_VECTOR (8 DOWNTO 0);
				 clock: IN STD_LOGIC  := '1';
				 data: IN STD_LOGIC_VECTOR (7 DOWNTO 0);
				 wren: IN STD_LOGIC ;
				 q: OUT STD_LOGIC_VECTOR (7 DOWNTO 0) );
	END COMPONENT;

	SIGNAL ram_address: STD_LOGIC_VECTOR(8 DOWNTO 0);
	SIGNAL ram_data_in: STD_LOGIC_VECTOR(7 DOWNTO 0);
	SIGNAL ram_data_out: STD_LOGIC_VECTOR(7 DOWNTO 0);
	SIGNAL ram_wren: STD_LOGIC;
	
	SIGNAL address_counter: STD_LOGIC_VECTOR(8 DOWNTO 0);
	SIGNAL address_counter_next: STD_LOGIC_VECTOR(8 DOWNTO 0);
	
	TYPE state_t IS (IDLE, RECEIVING, STORING);
	SIGNAL state, state_next: state_t;

BEGIN
	ram512_inst: ram512
	PORT MAP ( address => ram_address,
				  clock => clk,
				  data => ram_data_in,
				  wren => ram_wren,
				  q => ram_data_out );
	
	fsm_clk: PROCESS (clk, reset) IS
	BEGIN
		IF reset = '1' THEN
			state <= IDLE;
			address_counter <= (OTHERS => '0');
		ELSE
			IF RISING_EDGE(clk) THEN
				state <= state_next;
				address_counter <= address_counter_next;
			END IF;
		END IF;
	END PROCESS;
	
	fsm: PROCESS (state, receiver, address, phy_rx_data, phy_rx_enable, phy_rx_error, phy_rx_active) IS
	BEGIN
		state_next <= state;
		address_counter_next <= address_counter;
		len <= address_counter;
		
		CASE state IS
		
		WHEN IDLE =>
			ready <= NOT(phy_rx_active);
			ram_address <= address;
			ram_data_in <= (OTHERS => '0');
			ram_wren <= '0';
			data <= ram_data_out;
			IF receive = '1' THEN
				state_next <= RECEIVING;
			END IF;
			
		WHEN RECEIVING =>
			ready <= '0';
			ram_address <= address_counter;
			ram_data_in <= (OTHERS => '0');
			ram_wren <= '0';
			data <= (OTHERS => '0');
			IF phy_rx_enable = '1' THEN
				error <= '0';
				state_next <= STORING;
			ELSIF phy_rx_error = '1' THEN
				error <= '1';
				state_next <= IDLE;
			END IF;
		
		WHEN STORING =>
			ready <= '0';
			ram_address <= address_counter;
			ram_data_in <= phy_rx_data;
			ram_wren <= '1';
			data <= (OTHERS => '0');
			address_counter_next <= address_counter + 1;
			error <= '0';
			state_next <= IDLE;
			
		END CASE;
	END PROCESS;
	
END arch_smac_rx_buffer;